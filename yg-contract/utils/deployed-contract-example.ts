import { ethers } from 'ethers';
import { 
  YoungGuRuPikadUtils, 
  ProofUtils, 
  NetworkUtils,
  ProofData,
  VerifierConfig,
  ContractStatus
} from './index';

/**
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Utils ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Contract ‡∏ó‡∏µ‡πà Deploy ‡πÅ‡∏•‡πâ‡∏ß
 * Contract Address: 0x62a7ae6F5640d888C0CA3519CE48A00b9e36ceA2
 */
export class DeployedContractExample {
  private contractUtils: YoungGuRuPikadUtils;
  private provider: ethers.Provider;
  private signer: ethers.Signer;
  private contractAddress: string = '0x62a7ae6F5640d888C0CA3519CE48A00b9e36ceA2';

  constructor(
    contractABI: any[],
    rpcUrl: string,
    privateKey: string
  ) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á provider ‡πÅ‡∏•‡∏∞ signer
    this.provider = new ethers.JsonRpcProvider(rpcUrl);
    this.signer = new ethers.Wallet(privateKey, this.provider);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á contract utils
    this.contractUtils = new YoungGuRuPikadUtils(
      this.contractAddress,
      contractABI,
      this.signer
    );
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ contract ‡∏ó‡∏µ‡πà deploy ‡πÅ‡∏•‡πâ‡∏ß
   */
  async checkDeployedContractStatus() {
    try {
      console.log('=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Contract ‡∏ó‡∏µ‡πà Deploy ‡πÅ‡∏•‡πâ‡∏ß ===');
      console.log('Contract Address:', this.contractAddress);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ contract ‡∏ñ‡∏π‡∏Å deploy ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const isDeployed = await this.contractUtils.isContractDeployed();
      console.log('Contract Deployed:', isDeployed);

      if (!isDeployed) {
        console.log('‚ùå Contract ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å deploy');
        return;
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• contract status ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const status: ContractStatus = await this.contractUtils.getContractStatus();
      console.log('Contract Status:', {
        isDeployed: status.isDeployed,
        isPaused: status.isPaused,
        owner: status.owner,
        admin: status.admin,
        hasVerifiers: status.hasVerifiers,
        verifierCount: status.verifierCount
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network
      const network = await this.provider.getNetwork();
      console.log('Network:', network.name, '(Chain ID:', network.chainId, ')');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signer address
      const signerAddress = await this.contractUtils.getSignerAddress();
      console.log('Signer Address:', signerAddress);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ signer ‡πÄ‡∏õ‡πá‡∏ô owner ‡∏´‡∏£‡∏∑‡∏≠ admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const isOwnerOrAdmin = await this.contractUtils.isOwnerOrAdmin(signerAddress);
      console.log('Is Owner/Admin:', isOwnerOrAdmin);

      return status;
    } catch (error) {
      console.error('Error checking deployed contract status:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö verifier ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
   */
  async checkVerifiers() {
    try {
      console.log('\n=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Verifiers ===');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ verifier ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const hasVerifiers = await this.contractUtils.hasAnyVerifiers();
      console.log('Has Verifiers:', hasVerifiers);

      if (!hasVerifiers) {
        console.log('‚ö†Ô∏è  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ verifier ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ');
        console.log('üí° ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ verify proof ‡πÑ‡∏î‡πâ');
        return [];
      }

      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô verifier
      const verifierCount = await this.contractUtils.getVerifierCount();
      console.log('Verifier Count:', verifierCount);

      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ verifier ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const verifiers = await this.contractUtils.getAllVerifiers();
      console.log('All Verifiers:');
      verifiers.forEach((verifier, index) => {
        console.log(`  ${index + 1}. Key: ${verifier.key}`);
        console.log(`     Address: ${verifier.address}`);
      });

      return verifiers;
    } catch (error) {
      console.error('Error checking verifiers:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ owner/admin)
   */
  async setupVerifier(verifierAddress: string, key?: string) {
    try {
      console.log('\n=== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Verifier ===');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô owner ‡∏´‡∏£‡∏∑‡∏≠ admin
      const signerAddress = await this.contractUtils.getSignerAddress();
      const isOwnerOrAdmin = await this.contractUtils.isOwnerOrAdmin(signerAddress);
      
      if (!isOwnerOrAdmin) {
        console.log('‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ owner ‡∏´‡∏£‡∏∑‡∏≠ admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier ‡πÑ‡∏î‡πâ');
        console.log('Signer Address:', signerAddress);
        return false;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö address format
      if (!NetworkUtils.isValidAddress(verifierAddress)) {
        console.log('‚ùå Invalid verifier address format');
        return false;
      }

      // ‡πÉ‡∏ä‡πâ key ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡πÉ‡∏´‡∏°‡πà
      const verifierKey = key || '0x0000000000000000000000000000000000000000000000000000000000000001';
      
      const config: VerifierConfig = {
        key: verifierKey,
        verifier: verifierAddress as any
      };

      console.log('Setting up verifier:');
      console.log('  Key:', config.key);
      console.log('  Address:', config.verifier);

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier
      await this.contractUtils.configVerifier(config);
      console.log('‚úÖ Verifier ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
      const verifier = await this.contractUtils.getVerifier(config.key);
      console.log('Verified Address:', verifier);

      return true;
    } catch (error) {
      console.error('Error setting up verifier:', error);
      return false;
    }
  }

  /**
   * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö verify proof (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ verifier ‡∏Å‡πà‡∏≠‡∏ô)
   */
  async testVerifyProof(proofData: ProofData, key?: string) {
    try {
      console.log('\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Verify Proof ===');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ verifier ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const hasVerifiers = await this.contractUtils.hasAnyVerifiers();
      if (!hasVerifiers) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ verifier ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ verify proof ‡πÑ‡∏î‡πâ');
        console.log('üí° ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier ‡∏Å‡πà‡∏≠‡∏ô');
        return false;
      }

      // ‡πÉ‡∏ä‡πâ key ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ key ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      const verifierKey = key || '0x0000000000000000000000000000000000000000000000000000000000000001';
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ verifier ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö key ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const verifier = await this.contractUtils.getVerifier(verifierKey);
      if (verifier === '0x0000000000000000000000000000000000000000') {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ verifier ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö key: ${verifierKey}`);
        return false;
      }

      console.log('Verifying proof with:');
      console.log('  Key:', verifierKey);
      console.log('  Verifier:', verifier);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö proof format
      if (!ProofUtils.validateProofFormat(proofData.proof)) {
        console.log('‚ùå Invalid proof format');
        return false;
      }

      if (!ProofUtils.validatePublicInputs(proofData.publicInputs)) {
        console.log('‚ùå Invalid public inputs format');
        return false;
      }

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö verify Mia proof
      console.log('Testing Mia verification...');
      const miaResult = await this.contractUtils.verifyMia(verifierKey, proofData);
      console.log('Mia verification result:', miaResult);

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö verify Dek proof
      console.log('Testing Dek verification...');
      const dekResult = await this.contractUtils.verifyDek(verifierKey, proofData);
      console.log('Dek verification result:', dekResult);

      return miaResult && dekResult;
    } catch (error) {
      console.error('Error testing verify proof:', error);
      return false;
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á proof data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
   */
  createSampleProofData(): ProofData {
    console.log('\n=== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Proof Data ===');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á proof data (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ proof ‡∏à‡∏£‡∏¥‡∏á)
    const sampleProofData: ProofData = {
      proof: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',
      publicInputs: [
        '0x0000000000000000000000000000000000000000000000000000000000000001',
        '0x0000000000000000000000000000000000000000000000000000000000000002'
      ]
    };

    console.log('Sample Proof Data:');
    console.log('  Proof:', sampleProofData.proof);
    console.log('  Public Inputs:', sampleProofData.publicInputs);

    console.log('‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ proof ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');

    return sampleProofData;
  }

  /**
   * ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  async runFullTest() {
    try {
      console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Contract ‡∏ó‡∏µ‡πà Deploy ‡πÅ‡∏•‡πâ‡∏ß\n');

      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ contract
      const status = await this.checkDeployedContractStatus();
      if (!status?.isDeployed) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ - Contract ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å deploy');
        return;
      }

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö verifiers
      const verifiers = await this.checkVerifiers();

      // 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ verifier ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
      if (verifiers.length === 0) {
        console.log('\nüìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Verifier:');
        console.log('1. ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ verifier contract ‡∏ó‡∏µ‡πà deploy ‡πÅ‡∏•‡πâ‡∏ß');
        console.log('2. ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô owner ‡∏´‡∏£‡∏∑‡∏≠ admin ‡∏Ç‡∏≠‡∏á contract ‡∏ô‡∏µ‡πâ');
        console.log('3. ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setupVerifier() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
        console.log('4. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: await example.setupVerifier("VERIFIER_ADDRESS")');
      }

      // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á proof data
      const sampleProofData = this.createSampleProofData();

      // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö verify proof (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ verifier)
      if (verifiers.length > 0) {
        await this.testVerifyProof(sampleProofData);
      }

      console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      console.log('\nüìù ‡∏™‡∏£‡∏∏‡∏õ:');
      console.log('- Contract Address:', this.contractAddress);
      console.log('- Deployed:', status.isDeployed);
      console.log('- Paused:', status.isPaused);
      console.log('- Verifiers:', verifiers.length);
      console.log('- Owner:', status.owner);
      console.log('- Admin:', status.admin);

    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
      throw error;
    }
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á DeployedContractExample
 */
export function createDeployedContractExample(
  contractABI: any[],
  rpcUrl: string,
  privateKey: string
): DeployedContractExample {
  return new DeployedContractExample(contractABI, rpcUrl, privateKey);
}

/**
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */
export async function exampleUsage() {
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
  const CONTRACT_ABI: any[] = []; // ‡πÉ‡∏™‡πà ABI ‡∏Ç‡∏≠‡∏á contract
  const RPC_URL = 'https://sepolia.infura.io/v3/YOUR_API_KEY';
  const PRIVATE_KEY = 'your_private_key_here';
  const VERIFIER_ADDRESS = '0x...'; // address ‡∏Ç‡∏≠‡∏á verifier contract

  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance
    const example = createDeployedContractExample(CONTRACT_ABI, RPC_URL, PRIVATE_KEY);

    // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    await example.runFullTest();

    // ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô
    // await example.checkDeployedContractStatus();
    // await example.checkVerifiers();
    // await example.setupVerifier(VERIFIER_ADDRESS);

  } catch (error) {
    console.error('Error in example usage:', error);
  }
} 