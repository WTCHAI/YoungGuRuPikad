import { ethers } from 'ethers';
import { 
  YoungGuRuPikadUtils, 
  ProofUtils, 
  NetworkUtils,
  ProofData,
  VerifierConfig 
} from './index';

/**
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Utils ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö YoungGuRuPikad Contract
 */
export class ExampleUsage {
  private contractUtils: YoungGuRuPikadUtils;
  private provider: ethers.Provider;
  private signer: ethers.Signer;

  constructor(
    contractAddress: string,
    contractABI: any[],
    rpcUrl: string,
    privateKey: string
  ) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á provider ‡πÅ‡∏•‡∏∞ signer
    this.provider = new ethers.JsonRpcProvider(rpcUrl);
    this.signer = new ethers.Wallet(privateKey, this.provider);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á contract utils
    this.contractUtils = new YoungGuRuPikadUtils(
      contractAddress,
      contractABI,
      this.signer
    );
  }

  /**
   * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ verify Mia proof
   */
  async exampleVerifyMia() {
    try {
      console.log('=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ Verify Mia Proof ===');
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• proof ‡πÅ‡∏•‡∏∞ public inputs
      const proofData: ProofData = {
        proof: '0x1234567890abcdef...', // ‡πÉ‡∏™‡πà proof ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        publicInputs: [
          '0x0000000000000000000000000000000000000000000000000000000000000001',
          '0x0000000000000000000000000000000000000000000000000000000000000002'
        ]
      };

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö format ‡∏Ç‡∏≠‡∏á proof
      if (!ProofUtils.validateProofFormat(proofData.proof)) {
        throw new Error('Invalid proof format');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö format ‡∏Ç‡∏≠‡∏á public inputs
      if (!ProofUtils.validatePublicInputs(proofData.publicInputs)) {
        throw new Error('Invalid public inputs format');
      }

      // Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö verifier
      const key = '0x0000000000000000000000000000000000000000000000000000000000000001';

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Mia proof
      const result = await this.contractUtils.verifyMia(key, proofData);
      console.log('Mia verification result:', result);

      return result;
    } catch (error) {
      console.error('Error in exampleVerifyMia:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ verify Dek proof
   */
  async exampleVerifyDek() {
    try {
      console.log('=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ Verify Dek Proof ===');
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• proof ‡πÅ‡∏•‡∏∞ public inputs
      const proofData: ProofData = {
        proof: '0xabcdef1234567890...', // ‡πÉ‡∏™‡πà proof ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        publicInputs: [
          '0x0000000000000000000000000000000000000000000000000000000000000003',
          '0x0000000000000000000000000000000000000000000000000000000000000004'
        ]
      };

      // Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö verifier
      const key = '0x0000000000000000000000000000000000000000000000000000000000000002';

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dek proof
      const result = await this.contractUtils.verifyDek(key, proofData);
      console.log('Dek verification result:', result);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ prover
      const proverAddress = await this.signer.getAddress();
      const proverStatus = await this.contractUtils.getProverStatus(key, proverAddress);
      console.log('Prover status:', proverStatus);

      return result;
    } catch (error) {
      console.error('Error in exampleVerifyDek:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ owner/admin)
   */
  async exampleConfigVerifier() {
    try {
      console.log('=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Verifier ===');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô owner ‡∏´‡∏£‡∏∑‡∏≠ admin
      const owner = await this.contractUtils.getOwner();
      const admin = await this.contractUtils.getAdmin();
      const currentAddress = await this.signer.getAddress();
      
      if (currentAddress !== owner && currentAddress !== admin) {
        throw new Error('Only owner or admin can configure verifier');
      }

      // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier
      const config: VerifierConfig = {
        key: '0x0000000000000000000000000000000000000000000000000000000000000001',
        verifier: '0x1234567890123456789012345678901234567890' as any
      };

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö address format
      if (!NetworkUtils.isValidAddress(config.verifier)) {
        throw new Error('Invalid verifier address');
      }

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier
      await this.contractUtils.configVerifier(config);
      console.log('Verifier configured successfully');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
      const verifier = await this.contractUtils.getVerifier(config.key);
      console.log('Configured verifier:', verifier);

    } catch (error) {
      console.error('Error in exampleConfigVerifier:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Poseidon hash
   */
  async examplePoseidonHash() {
    try {
      console.log('=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Poseidon Hash ===');
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ hash
      const inputs = [
        BigInt('123456789'),
        BigInt('987654321'),
        BigInt('555555555')
      ];

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á hash
      const hash = await ProofUtils.poseidonHash(inputs);
      console.log('Poseidon hash:', hash.toString());

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô bytes32
      const bytes32 = ProofUtils.toBytes32(hash);
      console.log('Bytes32 format:', bytes32);

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô bigint
      const backToBigInt = ProofUtils.bytes32ToBigInt(bytes32);
      console.log('Back to bigint:', backToBigInt.toString());

      return hash;
    } catch (error) {
      console.error('Error in examplePoseidonHash:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á verifier key
   */
  async exampleGenerateVerifierKey() {
    try {
      console.log('=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Verifier Key ===');
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á key
      const data = [
        '0x1234567890123456789012345678901234567890123456789012345678901234',
        '0xabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef',
        '0x5555555555555555555555555555555555555555555555555555555555555555'
      ];

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á verifier key
      const key = await ProofUtils.generateVerifierKey(data);
      console.log('Generated verifier key:', key);

      return key;
    } catch (error) {
      console.error('Error in exampleGenerateVerifierKey:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network
   */
  async exampleNetworkValidation() {
    try {
      console.log('=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Network ===');
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• network ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const network = await this.provider.getNetwork();
      console.log('Current network:', network.name);
      console.log('Chain ID:', network.chainId);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô network ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const expectedChainId = 11155111; // Sepolia
      const isValid = NetworkUtils.validateNetwork(expectedChainId, Number(network.chainId));
      console.log('Network validation:', isValid);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• network configuration
      const networkConfig = NetworkUtils.getNetworkByChainId(Number(network.chainId));
      console.log('Network config:', networkConfig);

      return isValid;
    } catch (error) {
      console.error('Error in exampleNetworkValidation:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö contract status
   */
  async exampleContractStatus() {
    try {
      console.log('=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Contract Status ===');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ contract ‡∏ñ‡∏π‡∏Å pause ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const isPaused = await this.contractUtils.isPaused();
      console.log('Contract paused:', isPaused);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• owner
      const owner = await this.contractUtils.getOwner();
      console.log('Contract owner:', owner);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admin
      const admin = await this.contractUtils.getAdmin();
      console.log('Contract admin:', admin);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö address format
      console.log('Owner address valid:', NetworkUtils.isValidAddress(owner));
      console.log('Admin address valid:', NetworkUtils.isValidAddress(admin));

      return {
        isPaused,
        owner,
        admin
      };
    } catch (error) {
      console.error('Error in exampleContractStatus:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  async runAllExamples() {
    try {
      console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Utils ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network
      await this.exampleNetworkValidation();
      console.log('');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö contract status
      await this.exampleContractStatus();
      console.log('');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Poseidon hash
      await this.examplePoseidonHash();
      console.log('');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á verifier key
      await this.exampleGenerateVerifierKey();
      console.log('');

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô owner/admin)
      try {
        await this.exampleConfigVerifier();
        console.log('');
      } catch (error) {
        console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier ‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà owner/admin)');
        console.log('');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö proofs (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ proof ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
      console.log('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö verify proofs ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ proof ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      console.log('‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ uncomment ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ\n');

      // await this.exampleVerifyMia();
      // await this.exampleVerifyDek();

      console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
      throw error;
    }
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á ExampleUsage
 */
export function createExampleUsage(
  contractAddress: string,
  contractABI: any[],
  rpcUrl: string,
  privateKey: string
): ExampleUsage {
  return new ExampleUsage(contractAddress, contractABI, rpcUrl, privateKey);
} 