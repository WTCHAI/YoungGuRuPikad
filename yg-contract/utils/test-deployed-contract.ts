import 'dotenv/config';
import { ethers } from 'ethers';
import { 
  DeployedContractExample, 
  createDeployedContractExample,
  NetworkUtils 
} from './index';

// Configuration
const CONTRACT_ADDRESS = '0x62a7ae6F5640d888C0CA3519CE48A00b9e36ceA2';
const NETWORK_NAME = 'SEPOLIA';

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
const CONFIG = {
  // ABI ‡∏Ç‡∏≠‡∏á contract (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ ABI ‡∏à‡∏£‡∏¥‡∏á)
  CONTRACT_ABI: [
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ABI - ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ ABI ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å contract
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "_publicInputs",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyMia",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "_publicInputs",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyDek",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "configVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "verifiers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  
  // RPC URL (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ API key ‡∏à‡∏£‡∏¥‡∏á)
  RPC_URL: process.env.RPC_URL || 'https://sepolia.infura.io/v3/YOUR_API_KEY',
  
  // Private Key (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ private key ‡∏à‡∏£‡∏¥‡∏á)
  PRIVATE_KEY: process.env.PRIVATE_KEY || 'your_private_key_here',
  
  // Verifier Address (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ address ‡∏à‡∏£‡∏¥‡∏á)
  VERIFIER_ADDRESS: process.env.VERIFIER_ADDRESS || '0x...'
};

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */
async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Contract ‡∏ó‡∏µ‡πà Deploy ‡πÅ‡∏•‡πâ‡∏ß');
  console.log('Contract Address:', CONTRACT_ADDRESS);
  console.log('Network:', NETWORK_NAME);
  console.log('');

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö configuration
  if (CONFIG.RPC_URL.includes('YOUR_API_KEY')) {
    console.log('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ RPC_URL ‡πÉ‡∏ô environment variables');
    console.log('‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: export RPC_URL="https://sepolia.infura.io/v3/YOUR_ACTUAL_API_KEY"');
    return;
  }

  if (CONFIG.PRIVATE_KEY === 'your_private_key_here') {
    console.log('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PRIVATE_KEY ‡πÉ‡∏ô environment variables');
    console.log('‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: export PRIVATE_KEY="your_actual_private_key"');
    return;
  }

  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á provider ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network
    const provider = new ethers.JsonRpcProvider(CONFIG.RPC_URL);
    const network = await provider.getNetwork();
    
    console.log('Network Info:');
    console.log('  Name:', network.name);
    console.log('  Chain ID:', network.chainId);
    console.log('');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Sepolia ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (network.chainId !== 11155111n) {
      console.log('‚ö†Ô∏è  ‡∏ú‡∏¥‡∏î network ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Sepolia (Chain ID: 11155111)');
      console.log('‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', network.name, '(Chain ID:', network.chainId, ')');
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á DeployedContractExample
    const example = createDeployedContractExample(
      CONFIG.CONTRACT_ABI,
      CONFIG.RPC_URL,
      CONFIG.PRIVATE_KEY
    );

    // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    await example.runFullTest();

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ verifier address ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    if (CONFIG.VERIFIER_ADDRESS !== '0x...') {
      console.log('\nüîß ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Verifier...');
      const success = await example.setupVerifier(CONFIG.VERIFIER_ADDRESS);
      if (success) {
        console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö verify proof ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ verifier
        const proofData = example.createSampleProofData();
        await example.testVerifyProof(proofData);
      }
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    console.log('\nüîß ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:');
    console.log('1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RPC_URL ‡πÅ‡∏•‡∏∞ API key');
    console.log('2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PRIVATE_KEY');
    console.log('3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Sepolia)');
    console.log('4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö contract address');
    console.log('5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ABI ‡∏Ç‡∏≠‡∏á contract');
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô
 */
async function testSpecificFunction() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô');
  
  try {
    const example = createDeployedContractExample(
      CONFIG.CONTRACT_ABI,
      CONFIG.RPC_URL,
      CONFIG.PRIVATE_KEY
    );

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    console.log('\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ===');
    const status = await example.checkDeployedContractStatus();
    console.log('Status:', status);

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö verifiers
    console.log('\n=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Verifiers ===');
    const verifiers = await example.checkVerifiers();
    console.log('Verifiers:', verifiers);

  } catch (error) {
    console.error('Error in specific test:', error);
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• configuration
 */
function showConfig() {
  console.log('üìã Configuration:');
  console.log('Contract Address:', CONTRACT_ADDRESS);
  console.log('Network:', NETWORK_NAME);
  console.log('RPC URL:', CONFIG.RPC_URL.replace(/\/v3\/[^\/]+$/, '/v3/***'));
  console.log('Private Key:', CONFIG.PRIVATE_KEY.substring(0, 10) + '...');
  console.log('Verifier Address:', CONFIG.VERIFIER_ADDRESS);
  console.log('');
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö command line arguments
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
  console.log('Usage: ts-node test-deployed-contract.ts [options]');
  console.log('');
  console.log('Options:');
  console.log('  --help, -h     ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠');
  console.log('  --config       ‡πÅ‡∏™‡∏î‡∏á configuration');
  console.log('  --test         ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô');
  console.log('  --full         ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (default)');
  console.log('');
  console.log('Environment Variables:');
  console.log('  RPC_URL        RPC URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö network');
  console.log('  PRIVATE_KEY    Private key ‡∏Ç‡∏≠‡∏á wallet');
  console.log('  VERIFIER_ADDRESS Address ‡∏Ç‡∏≠‡∏á verifier contract');
  console.log('');
  console.log('Example:');
  console.log('  export RPC_URL="https://sepolia.infura.io/v3/YOUR_API_KEY"');
  console.log('  export PRIVATE_KEY="your_private_key"');
  console.log('  export VERIFIER_ADDRESS="0x..."');
  console.log('  ts-node test-deployed-contract.ts');
  process.exit(0);
}

if (args.includes('--config')) {
  showConfig();
  process.exit(0);
}

if (args.includes('--test')) {
  testSpecificFunction();
} else {
  // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (default)
  main();
} 